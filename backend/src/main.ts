/**
 * @file main.ts
 * @description
 * Point d'entr√©e principal de l'application.
 * Charge les variables d'environnement, initialise la base de donn√©es, cr√©e l'application Express et d√©marre le serveur.
 * G√®re √©galement l'arr√™t gracieux du serveur et la fermeture des connexions √† la base de donn√©es.
 *
 * @utilit√©
 * - Centralise le d√©marrage de l'application et la configuration initiale.
 * - Assure que la base de donn√©es est pr√™te avant de lancer le serveur.
 * - Fournit un m√©canisme de shutdown gracieux pour fermer proprement le serveur et la base de donn√©es.
 *
 * @remarques
 * - Les signaux SIGTERM et SIGINT sont captur√©s pour effectuer un arr√™t contr√¥l√©.
 * - Toute erreur lors de l'initialisation de la base ou du serveur provoque l'arr√™t du processus avec code 1.
 */

import dotenv from 'dotenv';
import path from 'path';

// Charger les variables d'environnement depuis le fichier .env √† la racine du projet
dotenv.config({ path: path.resolve(process.cwd(), '.env') });

import { createApp } from './app.js';
import { config } from './config/app.js';
import { databaseService } from './services/databaseService.js';

/**
 * Fonction principale pour d√©marrer le serveur.
 */
const startServer = async (): Promise<void> => {
  try {
    // Initialisation de la base de donn√©es
    console.log('üîß Initializing database connection...');
    await databaseService.initialize();

    // Cr√©ation de l'application Express
    const app = createApp();

    // D√©marrage du serveur
    const server = app.listen(config.port, config.host, () => {
      console.log(`üöÄ Server running on http://${config.host}:${config.port}`);
      console.log(`üì± Environment: ${config.nodeEnv}`);
      console.log(`‚è∞ Started at: ${new Date().toISOString()}`);
    });

    /**
     * Gestion de l'arr√™t gracieux du serveur
     * @param signal - Signal re√ßu (SIGTERM ou SIGINT)
     */
    const gracefulShutdown = async (signal: string) => {
      console.log(`üõë ${signal} received, shutting down gracefully...`);

      try {
        // Fermeture de la connexion √† la base de donn√©es
        await databaseService.close();
        console.log('‚úÖ Database connection closed');
      } catch (error) {
        console.error('‚ùå Error closing database connection:', error);
      }

      // Fermeture du serveur
      server.close(() => {
        console.log('‚úÖ Server closed');
        process.exit(0);
      });
    };

    // √âcoute des signaux pour arr√™t gracieux
    process.on('SIGTERM', () => gracefulShutdown('SIGTERM'));
    process.on('SIGINT', () => gracefulShutdown('SIGINT'));

  } catch (error) {
    console.error('‚ùå Failed to start server:', error);
    process.exit(1); // Arr√™t avec code d'erreur
  }
};

// Lancer le serveur
startServer();
