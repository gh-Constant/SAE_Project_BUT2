/**
 * @file providerManager.ts
 * @description
 * Gestionnaire centralis√© des fournisseurs d‚ÄôIA (AI Providers).
 * Permet d‚Äôenregistrer, de r√©cup√©rer ou de lister les providers disponibles.
 *
 * @utilit√©
 * - Stocke tous les fournisseurs disponibles dans une Map.
 * - Fournit un provider par d√©faut si aucun n‚Äôest sp√©cifi√©.
 * - Sert de registre central pour tout le syst√®me IA.
 *
 * @exports
 * - `ProviderManager` : classe g√©rant les providers enregistr√©s.
 * - `providerManager` : instance unique utilis√©e globalement.
 */

import { AIProvider } from './aiProvider.interface.js'

export class ProviderManager {
  private providers: Map<string, AIProvider> = new Map()

  /** Enregistre un nouveau provider sous un nom sp√©cifique. */
  registerProvider(name: string, provider: AIProvider): void {
    this.providers.set(name, provider)
  }

  /** R√©cup√®re un provider par son nom. */
  getProvider(name: string): AIProvider | undefined {
    return this.providers.get(name)
  }

  /** Renvoie le premier provider enregistr√© (utilis√© comme d√©faut). */
  getDefaultProvider(): AIProvider | undefined {
    return this.providers.values().next().value
  }

  /** Liste tous les noms des providers enregistr√©s. */
  listProviders(): string[] {
    return Array.from(this.providers.keys())
  }
}

// üîß Instance unique partag√©e dans tout le projet
export const providerManager = new ProviderManager()
