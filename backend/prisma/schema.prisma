generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Role {
  id        Int      @id @default(autoincrement())
  name      String   @unique(map: "name") @db.VarChar(255)
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamp(0)
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamp(0)
  users     User[]

  @@map("roles")
}

model PrestataireType {
  id        Int      @id @default(autoincrement())
  name      String   @unique(map: "name") @db.VarChar(255)
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamp(0)
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamp(0)
  users     User[]

  @@map("prestataireTypes")
}

model User {
  id                 Int              @id @default(autoincrement())
  firstname          String           @db.VarChar(255)
  lastname           String           @db.VarChar(255)
  email              String           @unique(map: "email") @db.VarChar(255)
  passwordHashed     String           @map("password_hashed") @db.Text
  roleId             Int
  prestataireTypeId  Int?
  avatarUrl          String?          @map("avatar_url") @db.VarChar(255)
  avatarType         String?          @map("avatar_type") @db.VarChar(50)
  isActive           Boolean          @default(true) @map("is_active")
  isVerified         Boolean          @default(false) @map("is_verified")
  xp                 Int              @default(0)
  level              Int              @default(0)
  createdAt          DateTime         @default(now()) @map("created_at") @db.Timestamp(0)
  updatedAt          DateTime         @default(now()) @updatedAt @map("updated_at") @db.Timestamp(0)
  locations          Location?
  userQuests         UserQuest[]
  role               Role             @relation(fields: [roleId], references: [id], onUpdate: NoAction, map: "fk_users_roleId")
  prestataireType    PrestataireType? @relation(fields: [prestataireTypeId], references: [id], onUpdate: NoAction, map: "fk_users_prestataireTypeId")

  @@index([roleId], map: "fk_users_roleId")
  @@index([prestataireTypeId], map: "fk_users_prestataireTypeId")
  @@map("users")
}

model Location {
  id         Int               @id @default(autoincrement())
  staticCode String            @unique(map: "staticCode") @db.VarChar(255)
  price      Decimal           @default(0.00) @db.Decimal(10, 2)
  available  Boolean           @default(true)
  userId     Int?              @unique(map: "userId")
  createdAt  DateTime          @default(now()) @map("created_at") @db.Timestamp(0)
  updatedAt  DateTime          @default(now()) @updatedAt @map("updated_at") @db.Timestamp(0)
  activities Activity[]
  services   LocationService[]
  user       User?             @relation(fields: [userId], references: [id], onUpdate: NoAction, map: "fk_locations_userId")
  products   Product[]
  quests     Quest[]

  @@map("locations")
}

model Service {
  id          Int               @id @default(autoincrement())
  serviceCode String            @unique(map: "serviceCode") @db.VarChar(255)
  name        String            @db.VarChar(255)
  description String            @db.Text
  createdAt   DateTime          @default(now()) @map("created_at") @db.Timestamp(0)
  updatedAt   DateTime          @default(now()) @updatedAt @map("updated_at") @db.Timestamp(0)
  locations   LocationService[]

  @@map("services")
}

model LocationService {
  id         BigInt   @id @default(autoincrement())
  locationId Int
  serviceId  Int
  isActive   Boolean  @default(true)
  createdAt  DateTime @default(now()) @map("created_at") @db.Timestamp(0)
  updatedAt  DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamp(0)
  location   Location @relation(fields: [locationId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_locationServices_locationId")
  service    Service  @relation(fields: [serviceId], references: [id], onUpdate: NoAction, map: "fk_locationServices_serviceId")

  @@unique([locationId, serviceId], name: "unique_location_service", map: "unique_location_service")
  @@index([serviceId], map: "fk_locationServices_serviceId")
  @@map("locationServices")
}

model Product {
  id          BigInt   @id @default(autoincrement())
  name        String   @db.VarChar(255)
  description String   @db.Text
  price       Decimal  @default(0.00) @db.Decimal(10, 2)
  stock       Int      @default(0)
  imageUrl    String?  @db.VarChar(255)
  locationId  Int
  createdAt   DateTime @default(now()) @map("created_at") @db.Timestamp(0)
  updatedAt   DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamp(0)
  location    Location @relation(fields: [locationId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_products_locationId")

  @@index([locationId], map: "fk_products_locationId")
  @@map("products")
}

model Quest {
  id          BigInt      @id @default(autoincrement())
  title       String      @db.VarChar(255)
  description String      @db.Text
  xpReward    Int         @default(10)
  locationId  Int
  createdAt   DateTime    @default(now()) @map("created_at") @db.Timestamp(0)
  updatedAt   DateTime    @default(now()) @updatedAt @map("updated_at") @db.Timestamp(0)
  location    Location    @relation(fields: [locationId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_quests_locationId")
  userQuests  UserQuest[]

  @@index([locationId], map: "fk_quests_locationId")
  @@map("quests")
}

model Activity {
  id          BigInt   @id @default(autoincrement())
  title       String   @db.VarChar(255)
  description String   @db.Text
  startTime   DateTime @db.Timestamp(0)
  endTime     DateTime @db.Timestamp(0)
  locationId  Int
  createdAt   DateTime @default(now()) @map("created_at") @db.Timestamp(0)
  updatedAt   DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamp(0)
  location    Location @relation(fields: [locationId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_activities_locationId")

  @@index([locationId], map: "fk_activities_locationId")
  @@map("activities")
}

model UserQuest {
  id        BigInt          @id @default(autoincrement())
  userId    Int
  questId   BigInt
  status    UserQuestStatus @default(accepted)
  createdAt DateTime        @default(now()) @map("created_at") @db.Timestamp(0)
  updatedAt DateTime        @default(now()) @updatedAt @map("updated_at") @db.Timestamp(0)
  quest     Quest           @relation(fields: [questId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_userQuests_questId")
  user      User            @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_userQuests_userId")

  @@unique([userId, questId], name: "unique_user_quest", map: "unique_user_quest")
  @@index([questId], map: "fk_userQuests_questId")
  @@map("userQuests")
}

enum UserQuestStatus {
  accepted
  completed
}
