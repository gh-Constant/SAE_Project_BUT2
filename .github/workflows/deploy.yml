name: Deploy to Oracle Cloud

on:
  push:
    branches:
      - main   # or master
    paths:
      - 'frontend/**'
      - 'backend/**'
      - '.github/workflows/**'

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    environment:
      name: oracle-cloud   # this makes it show up in the "Environments" tab
      url: http://minecraft.constantsuchet.fr   # link that appears in the deployment status
    steps:
      # 1. Checkout code
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2. Setup Node
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      # 3. Install dependencies
      - name: Install dependencies
        run: npm ci

      # 4. Run frontend tests
      - name: Run frontend tests
        run: npx nx test @sae-project-but2/frontend

      # 5. Build frontend in "nobackend" mode
      - name: Build frontend (nobackend)
        run: npx nx build @sae-project-but2/frontend --mode=nobackend

      # 6. Verify build output
      - name: Check build output
        run: |
          echo "Checking build output..."
          ls -la frontend/dist/
          echo "Build output contents:"
          find frontend/dist/ -type f | head -10

      # 7. Build backend
      - name: Build backend
        run: npx nx build @sae-project-but2/backend

      # 8. Verify backend build output
      - name: Check backend build output
        run: |
          echo "Checking backend build output..."
          ls -la backend/dist/

      # 9. Setup SSH key
      - name: Setup SSH key
        if: success()
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.ORACLE_SSH_KEY }}" > ~/.ssh/oracle_key
          chmod 600 ~/.ssh/oracle_key
          ssh-keyscan -H ${{ secrets.ORACLE_HOST }} >> ~/.ssh/known_hosts

      # 9.5. Create backend directory on server
      - name: Create backend directory on server
        run: ssh -i ~/.ssh/oracle_key -o StrictHostKeyChecking=no ${{ secrets.ORACLE_USER }}@${{ secrets.ORACLE_HOST }} "sudo mkdir -p /var/www/backend && sudo chown -R ${{ secrets.ORACLE_USER }}:${{ secrets.ORACLE_USER }} /var/www/backend"

      # 10. Deploy backend to Oracle Cloud
      - name: Deploy backend to Oracle Cloud
        run: |
          echo "Uploading backend build files to Oracle Cloud..."
          scp -i ~/.ssh/oracle_key -o StrictHostKeyChecking=no -r backend/dist ${{ secrets.ORACLE_USER }}@${{ secrets.ORACLE_HOST }}:/var/www/

      # 11. Install backend dependencies on server
      - name: Install backend dependencies on server
        run: ssh -i ~/.ssh/oracle_key -o StrictHostKeyChecking=no ${{ secrets.ORACLE_USER }}@${{ secrets.ORACLE_HOST }} "cd /var/www/backend && npm install --production"

      # 12. Restart backend service
      - name: Restart backend service
        run: ssh -i ~/.ssh/oracle_key -o StrictHostKeyChecking=no ${{ secrets.ORACLE_USER }}@${{ secrets.ORACLE_HOST }} "cd /var/www/backend && pm2 restart backend || pm2 start main.js --name backend"

      # 13. Fix permissions on server
      - name: Fix server permissions
        if: success()
        run: |
          ssh -i ~/.ssh/oracle_key -o StrictHostKeyChecking=no ${{ secrets.ORACLE_USER }}@${{ secrets.ORACLE_HOST }} "sudo chown -R ${{ secrets.ORACLE_USER }}:${{ secrets.ORACLE_USER }} /var/www/html /var/www/backend && sudo chmod -R 755 /var/www/html /var/www/backend"

      # 14. Deploy frontend to Oracle Cloud
      - name: Deploy frontend to Oracle Cloud
        if: success()   # only deploy if tests + build succeed
        run: |
          echo "Uploading frontend build files to Oracle Cloud..."
          scp -i ~/.ssh/oracle_key -o StrictHostKeyChecking=no -r frontend/dist/* ${{ secrets.ORACLE_USER }}@${{ secrets.ORACLE_HOST }}:/var/www/html/

      # 15. Restart Nginx
      - name: Restart Nginx
        if: success()
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.ORACLE_HOST }}
          username: ${{ secrets.ORACLE_USER }}
          key: ${{ secrets.ORACLE_SSH_KEY }}
          script: sudo systemctl restart nginx